{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyMIw+UZnwLihGdYeEz3/CPR",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/whoisgautxm/Zk-Implementation/blob/main/Elliptic%20Curve%20Python%20Implenmentation\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 1,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "wwsqlqxYreU_",
        "outputId": "e5d0c891-b6ee-47b1-e6f3-7fd30114adb9"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Collecting libnum\n",
            "  Downloading libnum-1.7.1-py3-none-any.whl (14 kB)\n",
            "Installing collected packages: libnum\n",
            "Successfully installed libnum-1.7.1\n"
          ]
        }
      ],
      "source": [
        "pip install libnum"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from libnum import has_sqrtmod_prime_power, has_sqrtmod_prime_power\n",
        "\n",
        "# the functions take arguments# has_sqrtmod_prime_power(n, field_mod, k), where n**k,\n",
        "# but we aren't interested in powers in modular fields, so we set k = 1\n",
        "# check if sqrt(8) mod 11 exists\n",
        "print(has_sqrtmod_prime_power(8, 11, 1))\n",
        "# False\n",
        "\n",
        "# check if sqrt(5) mod 11 exists\n",
        "print(has_sqrtmod_prime_power(5, 11, 1))\n",
        "# True\n",
        "\n",
        "# compute sqrt(5) mod 11\n",
        "print(list(libnum.sqrtmod_prime_power(5, 11, 1)))\n",
        "# [4, 7]\n",
        "\n",
        "assert (4 ** 2) % 11 == 5\n",
        "assert (7 ** 2) % 11 == 5\n",
        "\n",
        "# we expect 4 and 7 to be inverses of each other, because in \"regular\" math, the two solutions to a square root are sqrt and -sqrt\n",
        "assert (4 + 7) % 11 == 0\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 245
        },
        "id": "Jwi8l2ebrhwM",
        "outputId": "4fdd91c9-2c16-44ea-95c6-efc1d3efcb5a"
      },
      "execution_count": 2,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "False\n",
            "True\n"
          ]
        },
        {
          "output_type": "error",
          "ename": "NameError",
          "evalue": "name 'libnum' is not defined",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-2-8129bcab03ea>\u001b[0m in \u001b[0;36m<cell line: 14>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     12\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     13\u001b[0m \u001b[0;31m# compute sqrt(5) mod 11\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 14\u001b[0;31m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mlist\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mlibnum\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msqrtmod_prime_power\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m5\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m11\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     15\u001b[0m \u001b[0;31m# [4, 7]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     16\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mNameError\u001b[0m: name 'libnum' is not defined"
          ]
        }
      ]
    },
    {
      "source": [
        "!pip show libnum"
      ],
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "w_pjOPyQsNPA",
        "outputId": "21764488-5570-452d-e74f-a309bcd8c12e"
      },
      "execution_count": 3,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Name: libnum\n",
            "Version: 1.7.1\n",
            "Summary: Working with numbers (primes, modular, etc.)\n",
            "Home-page: \n",
            "Author: hellman\n",
            "Author-email: \n",
            "License: MIT\n",
            "Location: /usr/local/lib/python3.10/dist-packages\n",
            "Requires: \n",
            "Required-by: \n"
          ]
        }
      ]
    },
    {
      "source": [
        "# Install the libnum module if it is not already installed\n",
        "!pip install libnum\n",
        "\n",
        "# Import the libnum module\n",
        "import libnum\n",
        "# Here we use the \"Tonelli Shanks Algorithm\" to compute modular square roots .\n",
        "\n",
        "# Check if sqrt(8) mod 11 exists\n",
        "print(libnum.has_sqrtmod_prime_power(8, 11, 1))\n",
        "\n",
        "# Check if sqrt(5) mod 11 exists\n",
        "print(libnum.has_sqrtmod_prime_power(5, 11, 1))\n",
        "\n",
        "# Compute sqrt(5) mod 11\n",
        "print(list(libnum.sqrtmod_prime_power(5, 11, 1)))\n",
        "\n",
        "# Assert the results\n",
        "assert (4 ** 2) % 11 == 5\n",
        "assert (7 ** 2) % 11 == 5\n",
        "assert (4 + 7) % 11 == 0"
      ],
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "bDCAt_2vsSEZ",
        "outputId": "72de3766-d643-41c7-b917-7247d63e2e20"
      },
      "execution_count": 5,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Requirement already satisfied: libnum in /usr/local/lib/python3.10/dist-packages (1.7.1)\n",
            "False\n",
            "True\n",
            "[4, 7]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "!pip install matplotlib\n",
        "!pip install libnum\n",
        "\n",
        "import libnum\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "def generate_points(mod):\n",
        "    xs = []\n",
        "    ys = []\n",
        "    def y_squared(x):\n",
        "        return (x**3 + 3) % mod\n",
        "\n",
        "    for x in range(0, mod):\n",
        "        if libnum.has_sqrtmod_prime_power(y_squared(x), mod, 1):\n",
        "            square_roots = libnum.sqrtmod_prime_power(y_squared(x), mod, 1)\n",
        "\n",
        "            # we might have two solutionsfor sr in square_roots:\n",
        "                ys.append(sr)\n",
        "                xs.append(x)\n",
        "    return xs, ys\n",
        "\n",
        "\n",
        "xs, ys = generate_points(11)\n",
        "fig, (ax1) = plt.subplots(1, 1);\n",
        "fig.suptitle('y^2 = x^3 + 3 (mod p)');\n",
        "fig.set_size_inches(6, 6);\n",
        "ax1.set_xticks(range(0,11));\n",
        "ax1.set_yticks(range(0,11));\n",
        "plt.grid()\n",
        "plt.scatter(xs, ys)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 106
        },
        "id": "MOUCyx6ftjey",
        "outputId": "b701cc4e-09f3-4ac9-e2c6-ce849f7c790e"
      },
      "execution_count": 6,
      "outputs": [
        {
          "output_type": "error",
          "ename": "IndentationError",
          "evalue": "unexpected indent (<ipython-input-6-8de5828fb675>, line 18)",
          "traceback": [
            "\u001b[0;36m  File \u001b[0;32m\"<ipython-input-6-8de5828fb675>\"\u001b[0;36m, line \u001b[0;32m18\u001b[0m\n\u001b[0;31m    ys.append(sr)\u001b[0m\n\u001b[0m    ^\u001b[0m\n\u001b[0;31mIndentationError\u001b[0m\u001b[0;31m:\u001b[0m unexpected indent\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "!pip install matplotlib\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "F5JAAYMNuSBI",
        "outputId": "2acbf906-b60a-4b4f-e3f6-756a5486bd9b"
      },
      "execution_count": 7,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Requirement already satisfied: matplotlib in /usr/local/lib/python3.10/dist-packages (3.7.1)\n",
            "Requirement already satisfied: contourpy>=1.0.1 in /usr/local/lib/python3.10/dist-packages (from matplotlib) (1.2.1)\n",
            "Requirement already satisfied: cycler>=0.10 in /usr/local/lib/python3.10/dist-packages (from matplotlib) (0.12.1)\n",
            "Requirement already satisfied: fonttools>=4.22.0 in /usr/local/lib/python3.10/dist-packages (from matplotlib) (4.51.0)\n",
            "Requirement already satisfied: kiwisolver>=1.0.1 in /usr/local/lib/python3.10/dist-packages (from matplotlib) (1.4.5)\n",
            "Requirement already satisfied: numpy>=1.20 in /usr/local/lib/python3.10/dist-packages (from matplotlib) (1.25.2)\n",
            "Requirement already satisfied: packaging>=20.0 in /usr/local/lib/python3.10/dist-packages (from matplotlib) (24.0)\n",
            "Requirement already satisfied: pillow>=6.2.0 in /usr/local/lib/python3.10/dist-packages (from matplotlib) (9.4.0)\n",
            "Requirement already satisfied: pyparsing>=2.3.1 in /usr/local/lib/python3.10/dist-packages (from matplotlib) (3.1.2)\n",
            "Requirement already satisfied: python-dateutil>=2.7 in /usr/local/lib/python3.10/dist-packages (from matplotlib) (2.8.2)\n",
            "Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.10/dist-packages (from python-dateutil>=2.7->matplotlib) (1.16.0)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import libnum\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "def generate_points(mod):\n",
        "    xs = []\n",
        "    ys = []\n",
        "    def y_squared(x):\n",
        "        return (x**3 + 3) % mod\n",
        "\n",
        "    for x in range(0, mod):\n",
        "        if libnum.has_sqrtmod_prime_power(y_squared(x), mod, 1):\n",
        "            square_roots = libnum.sqrtmod_prime_power(y_squared(x), mod, 1)\n",
        "            print(square_roots)\n",
        "\n",
        "            # we might have two solutions for sr in square_roots:\n",
        "            for sr in square_roots:\n",
        "                ys.append(sr)\n",
        "                xs.append(x)\n",
        "    print(xs,ys)\n",
        "    return xs, ys\n",
        "\n",
        "\n",
        "xs, ys = generate_points(11)\n",
        "fig, (ax1) = plt.subplots(1, 1);\n",
        "fig.suptitle('y^2 = x^3 + 3 (mod p)');\n",
        "fig.set_size_inches(6, 6);\n",
        "ax1.set_xticks(range(0,11));\n",
        "ax1.set_yticks(range(0,11));\n",
        "plt.grid()\n",
        "plt.scatter(xs, ys)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 721
        },
        "id": "5lzzK2mquSqm",
        "outputId": "06b9300b-ec8e-4a71-ca78-aadd3bc53ee8"
      },
      "execution_count": 14,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<generator object sqrtmod_prime_power at 0x78f19cdcf8b0>\n",
            "<generator object sqrtmod_prime_power at 0x78f19cdce9d0>\n",
            "<generator object sqrtmod_prime_power at 0x78f19cdceea0>\n",
            "<generator object sqrtmod_prime_power at 0x78f19cdcec70>\n",
            "<generator object sqrtmod_prime_power at 0x78f19cdcf990>\n",
            "<generator object sqrtmod_prime_power at 0x78f19cdcee30>\n",
            "[0, 0, 1, 1, 2, 4, 4, 7, 7, 8, 8] [5, 6, 9, 2, 0, 1, 10, 4, 7, 3, 8]\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.collections.PathCollection at 0x78f19d0eea40>"
            ]
          },
          "metadata": {},
          "execution_count": 14
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 600x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "def double(x, y, a, p):\n",
        "    lambd = (((3 * x**2) % p ) *  pow(2 * y, -1, p)) % p\n",
        "    newx = (lambd**2 - 2 * x) % p\n",
        "    newy = (-lambd * newx + lambd * x - y) % p\n",
        "    return (newx, newy)\n",
        "\n",
        "def add_points(xq, yq, xp, yp, p, a=0):\n",
        "    if xq == yq == None:\n",
        "        return xp, yp\n",
        "    if xp == yp == None:\n",
        "        return xq, yq\n",
        "\n",
        "    assert (xq**3 + 3) % p == (yq ** 2) % p, \"q not on curve\"\n",
        "    assert (xp**3 + 3) % p == (yp ** 2) % p, \"p not on curve\"\n",
        "\n",
        "    if xq == xp and yq == yp:\n",
        "        return double(xq, yq, a, p)\n",
        "    elif xq == xp:\n",
        "        return None, None\n",
        "\n",
        "    lambd = ((yq - yp) * pow((xq - xp), -1, p) ) % p\n",
        "    xr = (lambd**2 - xp - xq) % p\n",
        "    yr = (lambd*(xp - xr) - yp) % p\n",
        "    return xr, yr\n",
        "\n",
        "next_x, next_y = 4, 10\n",
        "print(1, 4, 10)\n",
        "points = [(next_x, next_y)]\n",
        "for i in range(1, 12):\n",
        "    # repeatedly add G to the next point to generate all the elements\n",
        "    next_x, next_y = add_points(next_x, next_y, 4, 10, 11)\n",
        "    print(i, next_x, next_y)\n",
        "    points.append((next_x, next_y))\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "pWAsUvs_yznC",
        "outputId": "a338777c-a65f-466b-ad86-6ef948c3f617"
      },
      "execution_count": 16,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "1 4 10\n",
            "1 7 7\n",
            "2 1 9\n",
            "3 0 6\n",
            "4 8 8\n",
            "5 2 0\n",
            "6 8 3\n",
            "7 0 5\n",
            "8 1 2\n",
            "9 7 4\n",
            "10 4 1\n",
            "11 None None\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "xs11, ys11 = generate_points(11)\n",
        "\n",
        "fig, (ax1) = plt.subplots(1, 1);\n",
        "fig.suptitle('y^2 = x^3 + 3 (mod 11)');\n",
        "fig.set_size_inches(13, 6);\n",
        "\n",
        "ax1.set_title(\"modulo 11\")\n",
        "ax1.scatter(xs11, ys11, marker='o');\n",
        "ax1.set_xticks(range(0,11));\n",
        "ax1.set_yticks(range(0,11));\n",
        "ax1.grid()\n",
        "\n",
        "for i in range(0, 11):\n",
        "    plt.annotate(str(i+1), (points[i][0] + 0.1, points[i][1]), color=\"red\");"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 703
        },
        "id": "RQya2h5SziR8",
        "outputId": "c17afe0e-0536-466a-818e-d370ff4ad87f"
      },
      "execution_count": 17,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<generator object sqrtmod_prime_power at 0x78f19cdceea0>\n",
            "<generator object sqrtmod_prime_power at 0x78f19cdcf680>\n",
            "<generator object sqrtmod_prime_power at 0x78f19cdcec00>\n",
            "<generator object sqrtmod_prime_power at 0x78f19cdcfa00>\n",
            "<generator object sqrtmod_prime_power at 0x78f19cdcfa70>\n",
            "<generator object sqrtmod_prime_power at 0x78f19cdcfae0>\n",
            "[0, 0, 1, 1, 2, 4, 4, 7, 7, 8, 8] [5, 6, 9, 2, 0, 1, 10, 4, 7, 3, 8]\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1300x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    }
  ]
}